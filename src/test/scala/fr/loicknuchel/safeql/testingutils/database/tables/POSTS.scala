package fr.loicknuchel.safeql.testingutils.database.tables

import java.time.Instant

import fr.loicknuchel.safeql.Table._
import fr.loicknuchel.safeql._
import fr.loicknuchel.safeql.testingutils.Entities._

/**
 * Hello
 *
 * Class generated by fr.loicknuchel.safeql.gen.writer.ScalaWriter
 */
class POSTS private(getAlias: Option[String] = Some("p")) extends Table.SqlTable("PUBLIC", "posts", getAlias) {
  type Self = POSTS

  val ID: SqlField[Post.Id, POSTS] = SqlField(this, "id", "INT NOT NULL", JdbcType.Integer, nullable = false, 1)
  val TITLE: SqlField[String, POSTS] = SqlField(this, "title", "VARCHAR(50) NOT NULL", JdbcType.VarChar, nullable = false, 2)
  val TEXT: SqlField[String, POSTS] = SqlField(this, "text", "VARCHAR(4096) NOT NULL", JdbcType.VarChar, nullable = false, 3)
  val DATE: SqlField[Instant, POSTS] = SqlField(this, "date", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 4)
  val AUTHOR: SqlFieldRef[User.Id, POSTS, USERS] = SqlField(this, "author", "INT NOT NULL", JdbcType.Integer, nullable = false, 5, USERS.table.ID)
  val CATEGORY: SqlFieldRef[Category.Id, POSTS, CATEGORIES] = SqlField(this, "category", "INT", JdbcType.Integer, nullable = true, 6, CATEGORIES.table.ID)

  override def getFields: List[SqlField[_, POSTS]] = List(ID, TITLE, TEXT, DATE, AUTHOR, CATEGORY)

  override def getSorts: List[Sort] = List()

  override def searchOn: List[SqlField[_, POSTS]] = List(ID, TITLE, TEXT, DATE, AUTHOR, CATEGORY)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): POSTS = new POSTS(Some(alias))
}

private[database] object POSTS {
  val table = new POSTS() // table instance, should be accessed through `fr.loicknuchel.safeql.testingutils.database.Tables` object
}
